#!/bin/zsh
usage() {
    echo "Script to backup a given directory to a given destination" 1>&2;
    echo "$ backup full-path [?user@]location]" 1>&2;
}
if [[ $1 == "" || $2 == "" ]]; then
    usage
    return
fi
start=$(date +%s)
start_pwd=$(pwd)

cd /
dir="$1"
dest="$2"
flocal="$(whoami)@$(hostname):$1"
fdest="$2:$1"
shift 2

rsync_arg="-aHx"
# arg="-aHxvP"
if [[ $@ == "" ]]; then
    rsync_arg="-aHxq"
    size_full="$(du -h -d 0 $dir | sort -h)"
else
    size_full="$(du -h -d 1 $dir | sort -h)"
fi
size_str=${size_full}
type="?"

if [[ -d $dir ]]; then
    type="directory"
    # dir=${dir%/*}
    printf "Backing up $type: $FG[bold]\n$size_str$FG[reset]"
    # https://stackoverflow.com/questions/125281/how-do-i-remove-the-file-suffix-and-path-portion-from-a-path-string-in-bash
    # Send our directory to the parent directory of the destination
    fdest="$dest:${dir%/*}"
elif [[ -f $dir ]]; then
    # If it's a specific file, remove the filename from the destination
    type="file"
    printf "Backing up $type: $FG[bold]$size_str$FG[reset]"
    fdest="$dest:${dir%/*}"
    # lol, this uses NF to get the LAST. we want the start as above
    # dir=$(echo "$dir" | awk -F"/" '{ print "/"$(NF-1)"/"$NF }')
else
    printf "\e[38;5;%sm[err]\e[0m $dir is not present locally at: \e[38;5;%sm$flocal\e[0m \n" 1 8
    return 1
fi

# printf "$dir $FG[bold]$FG[78] -> $FG[reset] $fdest \n"
printf "$FG[bold]$FG[78] ->$FG[reset] $fdest \n"
printf "$FG[4]"

rsync \
    $rsync_arg \
    --update \
    --numeric-ids \
    --prune-empty-dirs \
    --exclude="/.git" --include="/*" --exclude="*.git" --exclude="node_modules/*" \
    --exclude="*.DS_Store" \
    -e 'ssh -T -o Compression=no -x' \
    $@ \
    "$dir" \
    "$fdest"
exit_code=$?
printf "$FG[reset]"

now=$(date +%s) ts=$(date -r $(( $now - $start ))  +'%-Mm %-Ss')
if [[ $exit_code == 0 ]]; then
    printf "Done in $FG[bold]$ts$FG[reset], return to $start_pwd\n"
    cd $start_pwd
    return 0
else
    printf "Error code($exit_code) in $FG[bold] $ts $FG[reset]\nmans rsync EXIT"
    # exit $exit_code
    return $exit_code
fi
