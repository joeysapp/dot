# ------------------------------------------------------------
#    ___                                 ___
#  ,'  _| .----.-----.--.--.-----.----. |_  `.
#  |  |   |   _|__ --|  |  |     |  __|   |  |
#  |  |_  |__| |_____|___  |__|__|____|  _|  |
#  `.___|            |_____|            |___,'
#  
#   rsyc wrapper to transfer over 500mbyte/s, locally, usb-c, NIC
#   $ rsync [-Rv] <source> <dest>
# ------------------------------------------------------------
#   https://gist.github.com/KartikTalwar/4393116
# ------------------------------------------------------------
# [todo]
#   * add this to a cron job or daemon
#   * add ability to pass in our own flags
#   * get gdate from coreutils, macos doesn't support %N
#   * do we want a --relative option?
#   * prob should pass through to rsync --help/-h lol

# [requirements]
# macOS catalina still ships with an old rsync. back it up and `brew install rsync`
# rsync-2.6.9, protocol version 29 from 2006
# rsync-3.2.7, protocol version 31 from 2022
#    (almost x3 faster)


# ------------------------------------------------------------
#  .--.--.-----.---.-.-----.-----.
#  |  |  |__ --|  _  |  _  |  -__|
#  |_____|_____|___._|___  |_____|
#                    |_____|
# ------------------------------------------------------------  
# [directories]
#   rsync interprets a directory with NO slash as "copy this directory"[1],
#   and a directory WITH a slash as "copy the contents of this directory"[2].
# 
# [1] rsync audio-local/ user@hostname:/Documents/music
#                                      -> /Documents/music/Sylvan Esso/...
#                                      -> /Documents/music/Run the Jewels/...
#
# [2] rsync audio-local  user@hostname:/Documents/music
#                                      -> /Documents/music/audio-local/Nujabes/...
#                                      -> /Documents/music/audio-local/Car Seat Headrest/...


# [files]
# Files can be {} e.g. {/etc,/root/backups,/home/ultralazer}
# *  /Documents/{music,code,text}


# [relative]
#   The -R flag will copy files relatively, e.g. their full path will be used (or fully created).
#   It is worth mentioning, groups and perms will be retained for those folders. (e.g. top-level /Users)
#
# [1] no flag:
#     rsync   ~/Documents/books/.../lotr.pdf   foo
#                                           -> foo/lotr.pdf
# [2] relative flag:
#     rsync   ~/Documents/books/.../lotr.pdf   foo
#                                           -> foo/Users/Documents/books/.../lotr.pdf




# [credits]
# * https://gist.github.com/KartikTalwar/4393116
# ------------------------------------------------------------
# The fastest remote directory rsync over ssh archival I can muster (40MB/s over 1gb NICs)
# This creates an archive that does the following:
# 
# rsync (Everyone seems to like -z, but it is much slower for me)
# 
#     a: archive mode - rescursive, preserves owner, preserves permissions, preserves modification times, preserves group, copies symlinks as symlinks, preserves device files.
#     H: preserves hard-links
#     A: preserves ACLs
#     X: preserves extended attributes
#     x: don't cross file-system boundaries
#     v: increase verbosity
#     --numeric-ds: don't map uid/gid values by user/group name
#     --delete: delete extraneous files from dest dirs (differential clean-up during sync)
#     --progress: show progress during transfer
# 
# ssh
# 
#     T: turn off pseudo-tty to decrease cpu load on destination.
#     c arcfour: use the weakest but fastest SSH encryption. Must specify "Ciphers arcfour" in sshd_config on destination.
#     o Compression=no: Turn off SSH compression.
#     x: turn off X forwarding if it is on by default.
#    

# I suck at bash scripting btw

MINARG=2
MAXARG=4

# flags
RELATIVE="false"
VERBOSE="false"

USAGE="Usage: rsync [-v] [-R] <source> <destination>"
if [[ $# -gt "MAXARG" || $# -lt "$MINARG" ]] then echo $USAGE; return $E_WRONGARGS; fi;

params=()
while getopts 'vR' opt; do
  case "${opt}" in
    v)
        VERBOSE="true"
        ;;
    R)
        RELATIVE="true"
        ;;
    \?)
        echo $USAGE
        return $E_WRONGARGS
        ;;
  esac
done

# shift is accounting for flags for our positional parameters $1 and $2
shift $((OPTIND-1))

if [[ $VERBOSE == "true" ]]; then
   params+=( "--progress" )
   params+=( "--human-readable" )
   params+=( "--stats" )
fi;
[[ $RELATIVE == "true" ]] && params+=( "--relative" )

params+=( "--exclude=.git" )
params+=( "--exclude=node_modules" )
params+=( "--exclude=.DS_Store" )

# [rsync features]
# perform a trial run with no changes made
# params+=( "--dry-run" )
# list the files instead of copying them
# params+=( "--list-only" )
# output a change-summary for all updates
# params+=( "--itemize-changes" )
# don't transfer any file larger than SIZE
# params+=( "--max-size=SIZE" )
# don't transfer any file smaller than SIZE
# params+=( "--min-size=SIZE" )
# prune empty directory chains from file-list
# params+=( "--prune-empty-dirs" )


# find similar file for basis if no dest file
# params+=( "--fuzzy" )


# skip files that are newer on the receiver
# [!note] - not helpful if you've touched empty dirs
# params+=( "--update" )

# [gist optimization]
# archive mode, -rlptgoD which is [todo]
# archive mode - rescursive, preserves owner, preserves permissions, preserves modification times, preserves group, copies symlinks as symlinks, preserves device files.
params+=( "--archive" )
# preserve ACLS (implies --perms)
params+=( "--acls" )
# preserve extended attributes
# [!fixme] - Not present in windows - how to detect that?
# params+=( "--xattrs" )
# preserve hard links
params+=( "--hard-links" )
# don't cross filesystem boundaries
params+=( "--one-file-system" )
# don't map uid/gid values by user/group name
params+=( "--numeric-ids" )
# delete extraneous files from dest dirs
params+=( "--delete" )

# [prefentials]
# preserve modification times
params+=( "--times" )
# preserve access (use) times
params+=( "--atimes" )
# avoid changing the atime on opened files
params+=( "--open-noatime" )
# preserve create times (newness)
params+=( "--crtimes" )

start=`date +%s`
/opt/homebrew/bin/rsync \
        "${params[@]}" \
        -e "ssh -T -c arcfour -o Compression=no -x" \
        $1 $2

end=`date +%s`
duration=$(echo "$end - $start" | bc -l)
ms=$duration
ms=$(( $duration * 1000 ));

if [[ $ms -lt 1000 ]]; then
   echo "???ms elasped"
elif [[ $ms -lt $((1000 * 60)) ]]; then
   echo "~$(( $ms / 1000 ))s elasped"
else
   echo "~$(( $ms / ( 1000 * 60 ) )) minutes elasped";
fi;