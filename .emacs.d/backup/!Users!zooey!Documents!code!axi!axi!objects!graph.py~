from axi.util import Console
from axi.math import Vector

class Node:
    def __init__(self, id=-1, pos=None, neighbors=[]):
        self.id = id
        self.pos = pos
        self.neighbors = neighbors

    def __str__(self):
        return "{},{},{}".format(self.id, self.p, self.neighbors)



  # Python List methods

  # append, e=nd of list
  # extend, iterable to end of list
  # insert(self, index, object)
  # pop(index=-1) remove and return at index
  # remove(self, value) remove first occurrence
  # copy shallow copy of list

class Graph:
    def __init__(self, head_id=None, nodes={}):
        self.head_id = head_id
        self.nodes = nodes
        self.history = []

    def get_head(self) -> Node:
        return self.nodes[self.head_id]

    def add_nodes(self, nodes={}, new_graph=False):
        if (new_graph):
            tmp_nodes = nodes.copy()
            tmp_nodes.update(self.nodes)
            self.nodes = tmp_graph
        else:
            self.nodes.update(nodes)

    



    def __str__(self):
        s = ""
        for node in self.nodes.keys():
            s += "{}\n".format(node)
        return s

#    def load(self, fname):
#        input_dir = "../plots/"
#        for _fname in os.listdir(input_dir):
#            print("graph.load", _fname);
#        with open(fname, "r") as file:
#            while True:
#                
#            t = file.readlines() # reads in a line at a single time, context switch prob takes forever
#            _graph_text = .split("\n")
#            path_entries = []
#            for entry_text in t_list:
#                new_entry = PathEntry(text=entry_text)
#                path_entries.append(new_entry)
#            self.path_entries.extend(path_entries)
#    
#    def save(self):
#        fname = "{}-{}.txt".format(round(time.clock_gettime(0)), len(self.path_entries))
#        with open(fname, "w") as f:
#            f.write(self.get_path_as_string())
#            f.close()
