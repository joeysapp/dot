#!/usr/bin/env zsh
# ------------------------------------------------------------
#   .----.-----.--.--.-----.----.
#   |   _|__ --|  |  |     |  __|
#   |__| |_____|___  |__|__|____|
#              |_____|
#            ___               __
#    ______.'  _|.---.-.-----.|  |_
#   |______|   _||  _  |__ --||   _|
#          |__|  |___._|_____||____|
#   rsyc wrapper to transfer over 500mbyte/s, locally, usb-c, NIC
#   $ rsync [-Rv] <source> <dest>
# ------------------------------------------------------------
#   https://gist.github.com/KartikTalwar/4393116
# ------------------------------------------------------------
# [todo]
#   * add this to a cron job or daemon
#   * add ability to pass in our own flags
#   * get gdate from coreutils, macos doesn't support %N
#   * do we want a --relative option?
#   * prob should pass through to rsync --help/-h lol

# [requirements]
# macOS catalina still ships with an old rsync. back it up and `brew install rsync`
# rsync-2.6.9, protocol version 29 from 2006
# rsync-3.2.7, protocol version 31 from 2022
#    (almost x3 faster)


# ------------------------------------------------------------
#  .--.--.-----.---.-.-----.-----.
#  |  |  |__ --|  _  |  _  |  -__|
#  |_____|_____|___._|___  |_____|
#                    |_____|
# ------------------------------------------------------------  
# [directories]
#   rsync interprets a directory with NO slash as "copy this directory"[1],
#   and a directory WITH a slash as "copy the contents of this directory"[2].
# 
# [1] rsync audio-local/ user@hostname:/Documents/music
#                                      -> /Documents/music/Sylvan Esso/...
#                                      -> /Documents/music/Run the Jewels/...
#
# [2] rsync audio-local  user@hostname:/Documents/music
#                                      -> /Documents/music/audio-local/Nujabes/...
#                                      -> /Documents/music/audio-local/Car Seat Headrest/...


# [files]
# Files can be {} e.g. {/etc,/root/backups,/home/ultralazer}
# *  /Documents/{music,code,text}


# [relative]
#   The -R flag will copy files relatively, e.g. their full path will be used (or fully created).
#   It is worth mentioning, groups and perms will be retained for those folders. (e.g. top-level /Users)
#
# [1] no flag:
#     rsync   ~/Documents/books/.../lotr.pdf   foo
#                                           -> foo/lotr.pdf
# [2] relative flag:
#     rsync   ~/Documents/books/.../lotr.pdf   foo
#                                           -> foo/Users/Documents/books/.../lotr.pdf




# [credits]
# * https://gist.github.com/KartikTalwar/4393116
# ------------------------------------------------------------
# The fastest remote directory rsync over ssh archival I can muster (40MB/s over 1gb NICs)
# This creates an archive that does the following:
# 
# rsync (Everyone seems to like -z, but it is much slower for me)
# 
#     a: archive mode - rescursive, preserves owner, preserves permissions, preserves modification times, preserves group, copies symlinks as symlinks, preserves device files.
#     H: preserves hard-links
#     A: preserves ACLs
#     X: preserves extended attributes
#     x: don't cross file-system boundaries
#     v: increase verbosity

#     --numeric-ds: don't map uid/gid values by user/group name
#     --delete: delete extraneous files from dest dirs (differential clean-up during sync)
#     --progress: show progress during transfer
# 
# ssh
# 
#     T: turn off pseudo-tty to decrease cpu load on destination.
#     c arcfour: use the weakest but fastest SSH encryption. Must specify "Ciphers arcfour" in sshd_config on destination.
#     o Compression=no: Turn off SSH compression.
#     x: turn off X forwarding if it is on by default.
#    

# I suck at bash scripting btw

MINARG=2
MAXARG=4

# flags
RELATIVE="false"
VERBOSE="false"

USAGE="Usage: rsync [-v] [-R] <source> <destination>"
if [[ $# -gt "MAXARG" || $# -lt "$MINARG" ]] then echo $USAGE; return $E_WRONGARGS; fi;

params=()
while getopts 'vR' opt; do
  case "${opt}" in
    v)
        VERBOSE="true"
        ;;
    R)
        RELATIVE="true"
        ;;
    \?)
        echo $USAGE
        return $E_WRONGARGS
        ;;
  esac
done

# shift is accounting for flags for our positional parameters $1 and $2
shift $((OPTIND-1))

if [[ $VERBOSE == "true" ]]; then
   params+=( "--progress" )
   params+=( "--human-readable" )
   params+=( "--stats" )
fi;
[[ $RELATIVE == "true" ]] && params+=( "--relative" )

params+=( "--exclude=.git" )
params+=( "--exclude=node_modules" )
params+=( "--exclude=.DS_Store" )

# [rsync features]
# perform a trial run with no changes made
# params+=( "--dry-run" )
# list the files instead of copying them
# params+=( "--list-only" )
# output a change-summary for all updates
# params+=( "--itemize-changes" )
# don't transfer any file larger than SIZE
# params+=( "--max-size=SIZE" )
# don't transfer any file smaller than SIZE
# params+=( "--min-size=SIZE" )
# prune empty directory chains from file-list
# params+=( "--prune-empty-dirs" )


# find similar file for basis if no dest file
# params+=( "--fuzzy" )


# skip files that are newer on the receiver
# [!note] - not helpful if you've touched empty dirs
# params+=( "--update" )

# [gist optimization]
# archive mode, -rlptgoD which is [todo]
# archive mode - rescursive, preserves owner, preserves permissions, preserves modification times, preserves group, copies symlinks as symlinks, preserves device files.
params+=( "--archive" )
# preserve ACLS (implies --perms)
params+=( "--acls" )
# preserve extended attributes
# [!fixme] - Not present in windows - how to detect that?
# params+=( "--xattrs" )
# preserve hard links
params+=( "--hard-links" )
# don't cross filesystem boundaries
params+=( "--one-file-system" )
# don't map uid/gid values by user/group name
params+=( "--numeric-ids" )
# delete extraneous files from dest dirs
params+=( "--delete" )

# [prefentials]
# preserve modification times
params+=( "--times" )
# preserve access (use) times
params+=( "--atimes" )
# avoid changing the atime on opened files
params+=( "--open-noatime" )
# preserve create times (newness)
params+=( "--crtimes" )

start=`date +%s`
/opt/homebrew/bin/rsync \
        "${params[@]}" \
        -e "ssh -T -c arcfour -o Compression=no -x" \
        $1 $2

end=`date +%s`
duration=$(echo "$end - $start" | bc -l)
ms=$duration
ms=$(( $duration * 1000 ));

if [[ $ms -lt 1000 ]]; then
   echo "???ms elasped"
elif [[ $ms -lt $((1000 * 60)) ]]; then
   echo "~$(( $ms / 1000 ))s elasped"
else
   echo "~$(( $ms / ( 1000 * 60 ) )) minutes elasped";
fi;



# The rest are just default rsync options:
# options
# --verbose, -v            increase verbosity
# --info=FLAGS             fine-grained informational verbosity
# --debug=FLAGS            fine-grained debug verbosity
# --stderr=e|a|c           change stderr output mode (default: errors)
# --quiet, -q              suppress non-error messages
# --no-motd                suppress daemon-mode MOTD
# --checksum, -c           skip based on checksum, not mod-time & size
# --archive, -a            archive mode is -rlptgoD (no -A,-X,-U,-N,-H)
# --no-OPTION              turn off an implied OPTION (e.g. --no-D)
# --recursive, -r          recurse into directories
# --relative, -R           use relative path names
# --no-implied-dirs        don't send implied dirs with --relative
# --backup, -b             make backups (see --suffix & --backup-dir)
# --backup-dir=DIR         make backups into hierarchy based in DIR
# --suffix=SUFFIX          backup suffix (default ~ w/o --backup-dir)
# --update, -u             skip files that are newer on the receiver
# --inplace                update destination files in-place
# --append                 append data onto shorter files
# --append-verify          --append w/old data in file checksum
# --dirs, -d               transfer directories without recursing
# --old-dirs, --old-d      works like --dirs when talking to old rsync
# --mkpath                 create destination's missing path components
# --links, -l              copy symlinks as symlinks
# --copy-links, -L         transform symlink into referent file/dir
# --copy-unsafe-links      only "unsafe" symlinks are transformed
# --safe-links             ignore symlinks that point outside the tree
# --munge-links            munge symlinks to make them safe & unusable
# --copy-dirlinks, -k      transform symlink to dir into referent dir
# --keep-dirlinks, -K      treat symlinked dir on receiver as dir
# --hard-links, -H         preserve hard links
# --perms, -p              preserve permissions
# --fileflags              preserve file-flags (aka chflags)
# --executability, -E      preserve executability
# --chmod=CHMOD            affect file and/or directory permissions
# --acls, -A               preserve ACLs (implies --perms)
# --xattrs, -X             preserve extended attributes
# --owner, -o              preserve owner (super-user only)
# --group, -g              preserve group
# --devices                preserve device files (super-user only)
# --copy-devices           copy device contents as a regular file
# --write-devices          write to devices as files (implies --inplace)
# --specials               preserve special files
# -D                       same as --devices --specials
# --times, -t              preserve modification times
# --atimes, -U             preserve access (use) times
# --open-noatime           avoid changing the atime on opened files
# --crtimes, -N            preserve create times (newness)
# --omit-dir-times, -O     omit directories from --times
# --omit-link-times, -J    omit symlinks from --times
# --super                  receiver attempts super-user activities
# --fake-super             store/recover privileged attrs using xattrs
# --sparse, -S             turn sequences of nulls into sparse blocks
# --preallocate            allocate dest files before writing them
# --dry-run, -n            perform a trial run with no changes made
# --whole-file, -W         copy files whole (w/o delta-xfer algorithm)
# --checksum-choice=STR    choose the checksum algorithm (aka --cc)
# --one-file-system, -x    don't cross filesystem boundaries
# --block-size=SIZE, -B    force a fixed checksum block-size
# --rsh=COMMAND, -e        specify the remote shell to use
# --rsync-path=PROGRAM     specify the rsync to run on remote machine
# --existing               skip creating new files on receiver
# --ignore-existing        skip updating files that exist on receiver
# --remove-source-files    sender removes synchronized files (non-dir)
# --del                    an alias for --delete-during
# --delete                 delete extraneous files from dest dirs
# --delete-before          receiver deletes before xfer, not during
# --delete-during          receiver deletes during the transfer
# --delete-delay           find deletions during, delete after
# --delete-after           receiver deletes after transfer, not during
# --delete-excluded        also delete excluded files from dest dirs
# --ignore-missing-args    ignore missing source args without error
# --delete-missing-args    delete missing source args from destination
# --ignore-errors          delete even if there are I/O errors
# --force-delete           force deletion of directories even if not empty
# --force-change           affect user-/system-immutable files/dirs
# --force-uchange          affect user-immutable files/dirs
# --force-schange          affect system-immutable files/dirs
# --max-delete=NUM         don't delete more than NUM files
# --max-size=SIZE          don't transfer any file larger than SIZE
# --min-size=SIZE          don't transfer any file smaller than SIZE
# --max-alloc=SIZE         change a limit relating to memory alloc
# --partial                keep partially transferred files
# --partial-dir=DIR        put a partially transferred file into DIR
# --delay-updates          put all updated files into place at end
# --prune-empty-dirs, -m   prune empty directory chains from file-list
# --numeric-ids            don't map uid/gid values by user/group name
# --usermap=STRING         custom username mapping
# --groupmap=STRING        custom groupname mapping
# --chown=USER:GROUP       simple username/groupname mapping
# --timeout=SECONDS        set I/O timeout in seconds
# --contimeout=SECONDS     set daemon connection timeout in seconds
# --ignore-times, -I       don't skip files that match size and time
# --size-only              skip files that match in size
# --modify-window=NUM, -@  set the accuracy for mod-time comparisons
# --temp-dir=DIR, -T       create temporary files in directory DIR
# --fuzzy, -y              find similar file for basis if no dest file
# --compare-dest=DIR       also compare destination files relative to DIR
# --copy-dest=DIR          ... and include copies of unchanged files
# --link-dest=DIR          hardlink to files in DIR when unchanged
# --compress, -z           compress file data during the transfer
# --compress-choice=STR    choose the compression algorithm (aka --zc)
# --compress-level=NUM     explicitly set compression level (aka --zl)
# --skip-compress=LIST     skip compressing files with suffix in LIST
# --cvs-exclude, -C        auto-ignore files in the same way CVS does
# --filter=RULE, -f        add a file-filtering RULE
# -F                       same as --filter='dir-merge /.rsync-filter'
#                          repeated: --filter='- .rsync-filter'
# --exclude=PATTERN        exclude files matching PATTERN
# --exclude-from=FILE      read exclude patterns from FILE
# --include=PATTERN        don't exclude files matching PATTERN
# --include-from=FILE      read include patterns from FILE
# --files-from=FILE        read list of source-file names from FILE
# --from0, -0              all *-from/filter files are delimited by 0s
# --old-args               disable the modern arg-protection idiom
# --secluded-args, -s      use the protocol to safely send the args
# --trust-sender           trust the remote sender's file list
# --copy-as=USER[:GROUP]   specify user & optional group for the copy
# --address=ADDRESS        bind address for outgoing socket to daemon
# --port=PORT              specify double-colon alternate port number
# --sockopts=OPTIONS       specify custom TCP options
# --blocking-io            use blocking I/O for the remote shell
# --outbuf=N|L|B           set out buffering to None, Line, or Block
# --stats                  give some file-transfer stats
# --8-bit-output, -8       leave high-bit chars unescaped in output
# --human-readable, -h     output numbers in a human-readable format
# --progress               show progress during transfer
# -P                       same as --partial --progress
# --itemize-changes, -i    output a change-summary for all updates
# --remote-option=OPT, -M  send OPTION to the remote side only
# --out-format=FORMAT      output updates using the specified FORMAT
# --log-file=FILE          log what we're doing to the specified FILE
# --log-file-format=FMT    log updates using the specified FMT
# --password-file=FILE     read daemon-access password from FILE
# --early-input=FILE       use FILE for daemon's early exec input
# --list-only              list the files instead of copying them
# --bwlimit=RATE           limit socket I/O bandwidth
# --stop-after=MINS        Stop rsync after MINS minutes have elapsed
# --stop-at=y-m-dTh:m      Stop rsync at the specified point in time
# --fsync                  fsync every written file
# --write-batch=FILE       write a batched update to FILE
# --only-write-batch=FILE  like --write-batch but w/o updating dest
# --read-batch=FILE        read a batched update from FILE
# --protocol=NUM           force an older protocol version to be used
# --iconv=CONVERT_SPEC     request charset conversion of filenames
# --checksum-seed=NUM      set block/file checksum seed (advanced)
# --ipv4, -4               prefer IPv4
# --ipv6, -6               prefer IPv6
# --version, -V            print the version + other info and exit
# --help, -h (*)           show this help (* -h is help only on its own)n